import cookie from 'cookie';
import _ from 'lodash';
import PrismicDOM from 'prismic-dom';
import Prismic from 'prismic-javascript';
import { Document } from 'prismic-javascript/types/documents';
import ResolvedApi from 'prismic-javascript/types/ResolvedApi';
import debug from './debug';
import { getLocalizedPath } from './i18n';

/**
 * Maps a Prismic document to its URL in the app. An example of when this is
 * used is when a modified document on Prismic is being previewed.
 *
 * @param doc - The Prismic document to map.
 *
 * @returns The corresponding URL.
 */
export function linkResolver(doc: Document): string {
  const locale = doc.lang ? localeResolver(doc.lang, true) : 'en';

  switch (doc.type) {
  case 'home': return getLocalizedPath('/', locale);
  case 'blog_post': return getLocalizedPath(`/blog/${doc.uid}`, locale);
  default: return '/';
  }
}

/**
 * Maps Prismic locale code to local locale code. Set `reverse` to `true` to
 * reverse the mapping (from local locale code to Prismic locale code instead).
 * Note that only local locale codes listed in `appConf#locales` will be
 * supported. Any unmappable or unsupported locale codes will yield English
 * locale as default.
 *
 * @param locale - Locale code to map.
 * @param reverse - Indicates if the operation is reversed. If `false` a Prismic
 *                  locale code is expected and will be mapped to a local locale
 *                  code. If `true` the mapping will be reversed.
 *
 * @returns The mapped locale code.
 */
export function localeResolver(locale: string, reverse = false): string {
  const defaultLocale = __I18N_CONFIG__.defaultLocale;
  const supportedLocales = __I18N_CONFIG__.locales;

  if (reverse) {
    switch (locale) {
    case 'ja-jp': return 'ja';
    default: return 'en';
    }
  }
  else {
    if (supportedLocales.indexOf(locale) < 0) return defaultLocale;

    switch (locale) {
    case 'ja': return 'ja-jp';
    default: return 'en-us';
    }
  }
}

/**
 * Gets the object to be used to interact with the Prismic API.
 *
 * @returns The Prismic API object.
 */
export function getAPI(): Promise<ResolvedApi> {
  const { apiEndpoint, accessToken } = __APP_CONFIG__.prismic;
  return Prismic.api(apiEndpoint, { accessToken });
}

/**
 * Gets the preview path of a document.
 *
 * @param token - The preview token generated by Prismic.
 * @param documentId - The UID of the document to preview.
 *
 * @returns The preview path.
 */
export async function getPreviewPath(token: string, documentId: string): Promise<string> {
  const api = await getAPI();
  return api.getPreviewResolver(token, documentId).resolve(linkResolver, '/');
}

/**
 * Saves the preview token to browser cookies.
 *
 * @param token - The preview token.
 */
export function savePreviewToken(token: string) {
  document.cookie = cookie.serialize(Prismic.previewCookie, token, {
    expires: new Date(Date.now() + 60 * 60 * 1000),
    path: '/',
  });

  if (loadPreviewToken()) {
    debug('Saving preview token to cookies...', 'OK');
  }
  else {
    debug('Saving preview token to cookies...', 'ERR');
  }
}

/**
 * Loads and returns the preview token from browser cookies, if available.
 *
 * @returns The preview token.
 */
export function loadPreviewToken(): string | undefined {
  const token = cookie.parse(document.cookie)[Prismic.previewCookie];
  return token;
}

/**
 * Convenience method for fetching the text from a document field.
 *
 * @param doc - The document.
 * @param path - The path of the target field relative to the root of the
 *               document object.
 *
 * @returns The text if available, `undefined` otherwise.
 */
export function getText(doc?: Document, path = ''): string | undefined {
  const fragment = _.get(doc, path);

  if (!fragment) return undefined;
  if (typeof fragment === 'string') return fragment;

  return PrismicDOM.RichText.asText(fragment);
}

/**
 * Convenience method for fetching multiple texts from a document array field.
 *
 * @param doc - The document.
 * @param path - The path of the array field relative to the root of the
 *               document object.
 * @param subpath - The path of the target field relative the root of each item
 *                  in the array field.
 *
 * @returns An array of texts if available. If the target path is a valid array
 *          but the target subpath contains no text, an empty array is returned.
 *          If the target path is not an array, `undefined` is returned.
 */
export function getTexts(doc?: Document, path = '', subpath = ''): ReadonlyArray<string> | undefined {
  const fragments = _.get(doc, path);

  if (!_.isArray(fragments)) return undefined;

  const texts = _.reduce(fragments, (out, curr: any) => {
    const text = _.get(curr, subpath);
    if (!text) return out;

    if (typeof text === 'string') {
      out.push(text);
    }
    else {
      out.push(PrismicDOM.RichText.asText(text));
    }

    return out;
  }, Array<string>());

  return texts;
}

/**
 * Convenience method for fetching the number from a document field.
 *
 * @param doc - The document.
 * @param path - The path of the target field relative to the root of the
 *               document object.
 *
 * @returns The number if available, `undefined` otherwise.
 */
export function getNumber(doc?: Document, path = ''): number | undefined {
  const fragment = _.get(doc, path);

  if (!fragment) return undefined;
  if (typeof fragment === 'number') return fragment;

  return fragment;
}

/**
 * Convenience method for fetching multiple numbers from a document array field.
 *
 * @param doc - The document.
 * @param path - The path of the array field relative to the root of the
 *               document object.
 * @param subpath - The path of the target field relative the root of each item
 *                  in the array field.
 *
 * @returns An array of numbers if available. If the target path is a valid
 *          array but the target subpath contains no number, an empty array is
 *          returned. If the target path is not an array, `undefined` is
 *          returned.
 */
export function getNumbers(doc?: Document, path = '', subpath = ''): ReadonlyArray<number> | undefined {
  const fragments = _.get(doc, path);

  if (!_.isArray(fragments)) return undefined;

  const numbers = _.reduce(fragments, (out, curr: any) => {
    const n = _.get(curr, subpath);
    if (n === undefined || n === null) return out;

    if (typeof n === 'number') {
      out.push(n);
    }
    else {
      out.push(n);
    }

    return out;
  }, Array<number>());

  return numbers;
}

/**
 * Convenience method for fetching the URL from a document field.
 *
 * @param doc - The document.
 * @param path - The path of the target field relative to the root of the
 *               document object.
 *
 * @returns The URL if available, `undefined` otherwise.
 */
export function getUrl(doc?: Document, path = ''): string | undefined {
  const fragment = _.get(doc, path);

  if (!fragment) return undefined;

  return PrismicDOM.Link.url(fragment, linkResolver);
}

/**
 * Convenience method for fetching multiple URLs from a document array field.
 *
 * @param doc - The document.
 * @param path - The path of the array field relative to the root of the
 *               document object.
 * @param subpath - The path of the target field relative the root of each item
 *                  in the array field.
 *
 * @returns An array of URLs if available. If the target path is a valid array
 *          but the target subpath contains no URL, an empty array is returned.
 *          If the target path is not an array, `undefined` is returned.
 */
export function getUrls(doc?: Document, path = '', subpath = ''): ReadonlyArray<string> | undefined {
  const fragments = _.get(doc, path);

  if (!_.isArray(fragments)) return undefined;

  const urls = _.reduce(fragments, (out, curr: any) => {
    const url = _.get(curr, subpath);
    if (!url) return out;
    if (url.length === 0) return out;

    out.push(PrismicDOM.Link.url(url, linkResolver));

    return out;
  }, Array<string>());

  return urls;
}

/**
 * Convenience method for fetching the HTML markup from a document field.
 *
 * @param doc - The document.
 * @param path - The path of the target field relative to the root of the
 *               document object.
 *
 * @returns The HTML markup if available, `undefined` otherwise.
 */
export function getMarkup(doc?: Document, path = ''): string | undefined {
  const fragment = _.get(doc, path);

  if (!fragment) return undefined;

  return PrismicDOM.RichText.asHtml(fragment, linkResolver);
}

/**
 * Convenience method for fetching multiple HTML markups from a document array
 * field.
 *
 * @param doc - The document.
 * @param path - The path of the array field relative to the root of the
 *               document object.
 * @param subpath - The path of the target field relative the root of each item
 *                  in the array field.
 *
 * @returns An array of HTML markups if available. If the target path is a valid
 *          array but the target subpath contains no HTML markup, an empty array
 *          is returned. If the target path is not an array, `undefined` is
 *          returned.
 */
export function getMarkups(doc?: Document, path = '', subpath = ''): ReadonlyArray<string> | undefined {
  const fragments = _.get(doc, path);

  if (!_.isArray(fragments)) return undefined;

  const markups = _.reduce(fragments, (out, curr: any) => {
    const markup = _.get(curr, subpath);
    if (!markup) return out;
    if (markup.length === 0) return out;

    out.push(PrismicDOM.RichText.asHtml(markup, linkResolver));

    return out;
  }, Array<string>());

  return markups;
}

/**
 * Convenience method for fetching the inner document from a document field.
 *
 * @param doc - The document.
 * @param path - The path of the target field relative to the root of the
 *               document object.
 *
 * @returns The HTML markup if available, `undefined` otherwise.
 */
export function getDoc(doc?: Document, path = '', lookupDocs?: ReadonlyArray<Document>): Document | undefined {
  const fragment = _.get(doc, path);

  if (!fragment) return undefined;
  if (!fragment.id) return undefined;

  if (!lookupDocs) return fragment;

  return _.find(lookupDocs, (v) => v.id === fragment.id);
}

/**
 * Convenience method for fetching multiple inner documents from a document
 * array field.
 *
 * @param doc - The document.
 * @param path - The path of the array field relative to the root of the
 *               document object.
 * @param subpath - The path of the target field relative the root of each item
 *                  in the array field.
 *
 * @returns An array of inner documents if available. If the target path is a
 *          valid array but the target subpath contains no inner document, an
 *          empty array is returned. If the target path is not an array,
 *          `undefined` is returned.
 */
export function getDocs(doc?: Document, path = '', subpath = '', lookupDocs?: ReadonlyArray<Document>): ReadonlyArray<Document> | undefined {
  const fragments = _.get(doc, path);

  if (!fragments) return undefined;

  const docs = _.reduce(fragments, (out, curr: any) => {
    const doc = _.get(curr, subpath);
    if (doc && doc.id) out.push(doc);
    return out;
  }, Array<Document>());

  if (!lookupDocs) return docs;

  const matchedDocs = _.intersectionWith(lookupDocs, docs, (lookupDoc, doc) => lookupDoc.id === doc.id);

  return matchedDocs;
}
